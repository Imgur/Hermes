// Generated by Apple Swift version 1.2 (swiftlang-602.0.53.1 clang-602.0.53)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
#if __has_feature(nullability)
#  define SWIFT_NULLABILITY(X) X
#else
# if !defined(__nonnull)
#  define __nonnull
# endif
# if !defined(__nullable)
#  define __nullable
# endif
# if !defined(__null_unspecified)
#  define __null_unspecified
# endif
#  define SWIFT_NULLABILITY(X)
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class HermesNotification;
@protocol HermesDelegate;


/// Hermes is an in-app notification system that has a simple interface and can work with just about any sort of notification you can think of.
/// Examples include, but are not limited to:
///
/// <ul><li><p>Success alerts</p></li><li><p>Failure alerts</p></li><li><p>Push Notifications</p></li><li><p>Social Notifications (someone just commented on your post!)</p></li></ul>
/// Notes:
///
/// <ul><li><p>Currently, this library only works well when you keep your app in one orientation.  Switching between portrait and landscape causes some gnarly</p></li></ul>
/// bugs and still needs to be handled.
SWIFT_CLASS("_TtC6Hermes6Hermes")
@interface Hermes : NSObject

/// You typically will never need to use more than one instance of Hermes
+ (Hermes * __nonnull)sharedInstance;
@property (nonatomic, weak) id <HermesDelegate> __nullable delegate;

/// Give Hermes one notification to post. If waiting == false, you'll see this notification right away
///
/// \param notification The notification you want Hermes to post
- (void)postNotification:(HermesNotification * __nonnull)notification;

/// Give Hermes an array of notifications to post. If waiting == false, you'll see these notifications right away
///
/// \param notifications The notifications you want Hermes to post
- (void)postNotifications:(NSArray * __nonnull)notifications;

/// Tell Hermes to wait and you can queue up multiple notifications
- (void)wait;

/// Done queuing up those notifications? Tell Hermes to go!
- (void)go;
- (void)close;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HermesNotificationView;

SWIFT_PROTOCOL("_TtP6Hermes14HermesDelegate_")
@protocol HermesDelegate
@optional

/// \param hermes the Hermes instance
///
/// \param notification the notification being made
///
/// \returns the notification view, or nil to use HermesDefaultNotificationView
- (HermesNotificationView * __nullable)hermesNotificationViewForNotificationWithHermes:(Hermes * __nonnull)hermes notification:(HermesNotification * __nonnull)notification;
@end

@class NSAttributedString;
@class UIColor;
@class UIImage;
@class NSURL;

SWIFT_CLASS("_TtC6Hermes18HermesNotification")
@interface HermesNotification : NSObject
@property (nonatomic, copy) NSString * __nullable text;
@property (nonatomic) NSAttributedString * __nullable attributedText;
@property (nonatomic) UIColor * __nullable color;
@property (nonatomic) UIImage * __nullable image;
@property (nonatomic) NSURL * __nullable imageURL;
@property (nonatomic, copy) NSString * __nullable tag;
@property (nonatomic, copy) NSString * __nullable soundPath;
@property (nonatomic, weak) id __nullable target;
- (void)addTarget:(id __nullable)target selector:(SEL __null_unspecified)selector;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

SWIFT_CLASS("_TtC6Hermes22HermesNotificationView")
@interface HermesNotificationView : UIView
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
